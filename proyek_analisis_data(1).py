# -*- coding: utf-8 -*-
"""Proyek Analisis Data(1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dYoqMxaKhPDsIX6r-XHQptlooXJq7dlG

# Proyek Analisis Data: Customer
- **Nama:** Nabila Syaida Ramdani
- **Email:** nabila87611@gmail.com
- **ID Dicoding:** NabilaSyaida

## Menentukan Pertanyaan Bisnis

- Kota mana yang memiliki jumlah pelanggan terbanyak berdasarkan (customer_city)?
- Dapatkah kita membuat grafik untuk menunjukkan jumlah pelanggan di setiap kota (customer city) dan negara bagian (customer_state)?

## Import Semua Packages/Library yang Digunakan
"""

pip install scipy

import pandas as pd
import numpy as np
import scipy
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling"""

data = pd.read_csv("customer.csv", delimiter=",")
data

"""### Gathering Data"""

data.head()

data.describe()

"""**Insight:**
- Data diambil melalui platform kaggle https://www.kaggle.com/datasets/olistbr/brazilian-ecommerce
- Terdapat 99441 baris dengan 5 kolom dan terdapat beberapa tipe dalam data tersebut diantaranya object dan integer.

### Assessing Data
"""

data.nunique()

data.isna().sum()

"""**Insight:**
- Tidak adanya data yang null(kosong) , berarti data tersebut lengkap dan tidak adanya nilai yang hilang, dan tidak diperlukan teknik untuk mengatasi missing value.
- Dapat dilihat pada output di atas pada kolom customer_id 0 menunjukkan tidak adanya data yang hilang, dan seterusnya pada semua kolom

### Cleaning Data
"""

data.duplicated().sum()

"""**Insight:**
- Menunjukkan tidak adanya data yang duplikat.

## Exploratory Data Analysis (EDA)
"""

data.describe(include = "all")

"""**Insight:**
- Dapat dilihat konsentrasi pelanggan, banyak yang berasal dari kota Sao Paulo dan negara bagian SP.
- Sao Paulo adalah negara bagian yang memiliki frekuensi tertinggi, dengan 41476 pelanggan dapat dilihat pada customer_state.
"""

city = data.groupby(by="customer_city").customer_id.nunique().sort_values(ascending=False)
city

"""**Insight:**
- Dapat dilihat kolom pertama menunjukkan nama kota (customer_city) dan kolom kedua menunjukkan jumlah pelanggan dari masing-masing kota (customer_state)

## Visualization & Explanatory Analysis

### Pertanyaan 1:
Kota mana yang memiliki pelanggan terbanyak?
"""

city_counts = data["customer_city"].value_counts().head(10)  # 10 kota teratas
plt.barh(city_counts.index, city_counts.values)
plt.xlabel("Number of Customers")
plt.title("Top 10 Cities by Number of Customers")

for index, value in enumerate(city_counts.values):
  plt.text(value, index, str(value))
plt.show()

"""- Dapat dilihat dari bar chart di atas menunjukkan bahwa pelanggan terbanyak adalah kota Sao Paulo dengan 15540 pelanggan.

### Pertanyaan 2:
"""

state_counts = data["customer_state"].value_counts().head(5)
plt.figure(figsize=(7, 7))
plt.pie(state_counts.values, labels=state_counts.index, autopct='%1.1f%%', startangle=90, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0'])

plt.title("Top 5 States by Number of Customers")
plt.show()

"""**Insight:**
- Negara Sao Paulo dengan jumlah pelanggan terbanyak mencakup 54.4% dari total pelanggan, negara bagian kedua terbanyak yaitu Rio de Janeiro dengan nilai 16.7%, negara ketiga terbanyak yaitu MG (Minas Gerais) dengan nilai 15.2%.

## Analisis Lanjutan (Opsional)
"""

unique_cities = set(data["customer_city"])
print(unique_cities)

unique_state = set(data["customer_state"])
print(unique_state)

"""## Conclusion

- Dari data customer yang berisi 99441 baris dengan 5 kolom, dapat dilihat terdapat 5 kota diantaranya sao bernardo do campo, franca, sao paulo, mogi das cruzes, dan campinas. Kota yang memiliki pelanggan terbanyak yaitu kota Sao Paulo yaitu sebanyak 15540 pelanggan.
- Kita dapat menggunakan bar chart untuk memvisualisasikan 10 kota yang memiliki customer terbanyak.
"""

rfm_df = data.groupby(by="customer_id", as_index=False).agg({
    "customer_id": "max",
    "customer_city": "nunique",
    "customer_state": "sum"
})
rfm_df.columns = ["customer_id", "max_order_timestamp", "monetary"]

rfm_df["max_order_timestamp"] = pd.to_datetime(rfm_df["max_order_timestamp"], errors='coerce')
rfm_df["max_order_timestamp"] = rfm_df["max_order_timestamp"].dt.date

rfm_df.drop("max_order_timestamp", axis=1, inplace=True)
rfm_df.head()

data.to_csv("all_data.csv", index=False)

